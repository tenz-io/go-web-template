// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package constant

import (
	"errors"
	"fmt"
)

const (
	// RoleAnonymous is a Role of type Anonymous.
	RoleAnonymous Role = iota
	// RoleAdmin is a Role of type Admin.
	RoleAdmin
	// RoleUser is a Role of type User.
	RoleUser
)

var ErrInvalidRole = errors.New("not a valid Role")

const _RoleName = "anonymousadminuser"

var _RoleMap = map[Role]string{
	RoleAnonymous: _RoleName[0:9],
	RoleAdmin:     _RoleName[9:14],
	RoleUser:      _RoleName[14:18],
}

// String implements the Stringer interface.
func (x Role) String() string {
	if str, ok := _RoleMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Role(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Role) IsValid() bool {
	_, ok := _RoleMap[x]
	return ok
}

var _RoleValue = map[string]Role{
	_RoleName[0:9]:   RoleAnonymous,
	_RoleName[9:14]:  RoleAdmin,
	_RoleName[14:18]: RoleUser,
}

// ParseRole attempts to convert a string to a Role.
func ParseRole(name string) (Role, error) {
	if x, ok := _RoleValue[name]; ok {
		return x, nil
	}
	return Role(0), fmt.Errorf("%s is %w", name, ErrInvalidRole)
}

// MarshalText implements the text marshaller method.
func (x Role) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Role) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRole(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
